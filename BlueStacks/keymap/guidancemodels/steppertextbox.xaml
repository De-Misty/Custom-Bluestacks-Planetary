<common:XTextBox
	x:Class="BlueStacks.BlueStacksUI.StepperTextBox"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
	xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
	xmlns:common="clr-namespace:BlueStacks.Common;assembly=HD-Common"
	Style="{DynamicResource StepperStyle}"
	xmlns:bluestacksui="clr-namespace:BlueStacks.BlueStacksUI"
	ContextMenu="{x:Null}"
	CommandManager.PreviewExecuted="OnPreviewExecuted">
	<FrameworkElement.Resources>
		<ResourceDictionary>
			<DataTemplate
				x:Key="TextContentTemplate">
				<TextBlock
					Name="wrapTextBlock"
					TextAlignment="Left"
					TextWrapping="Wrap"
					Text="{Binding}"
					MaxWidth="{Binding MaxWidth, RelativeSource={RelativeSource AncestorType={x:Type RepeatButton}}}" />
			</DataTemplate>
			<Style
				x:Key="{x:Type RepeatButton}"
				TargetType="{x:Type RepeatButton}">
				<Setter
					Property="BorderThickness"
					Value="1,0,0,0" />
				<Setter
					Property="RepeatButton.Delay"
					Value="500" />
				<Setter
					Property="RepeatButton.Interval"
					Value="100" />
				<Setter
					Property="HorizontalContentAlignment"
					Value="Center" />
				<Setter
					Property="VerticalContentAlignment"
					Value="Center" />
				<Setter
					Property="Padding"
					Value="1" />
				<Setter
					Property="Background"
					Value="#00FFFFFF" />
				<Setter
					Property="Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type RepeatButton}">
							<Border
								x:Name="buttonHoverBorder"
								SnapsToDevicePixels="True"
								Visibility="Visible"
								BorderBrush="{TemplateBinding Control.BorderBrush}"
								BorderThickness="{TemplateBinding Control.BorderThickness}">
								<Border
									x:Name="buttonBorder"
									SnapsToDevicePixels="True"
									Background="{TemplateBinding Control.Background}"
									Margin="-0.45">
									<Grid
										HorizontalAlignment="Center"
										VerticalAlignment="Center">
										<Grid.RowDefinitions>
											<RowDefinition
												Height="2*" />
											<RowDefinition
												Height="11*" />
											<RowDefinition
												Height="2*" />
										</Grid.RowDefinitions>
										<Grid.ColumnDefinitions>
											<ColumnDefinition
												Width="{Binding ElementName=mButton, Path=ActualHeight, ConverterParameter=0.5, Converter={common:XamlSizeConverter}}" />
											<ColumnDefinition
												Width="Auto" />
											<ColumnDefinition
												Width="{Binding ElementName=mButton, Path=ActualHeight, ConverterParameter=0.5, Converter={common:XamlSizeConverter}}" />
										</Grid.ColumnDefinitions>
										<Grid
											Row="1"
											Column="1">
											<Grid.ColumnDefinitions>
												<ColumnDefinition
													Width="Auto" />
												<ColumnDefinition
													Width="Auto" />
											</Grid.ColumnDefinitions>
											<common:CustomPictureBox
												Margin=" 0,0,8,0"
												Visibility="Collapsed"
												Height="{Binding ElementName=Chrome, Path=ActualHeight, ConverterParameter=0.7, Converter={common:XamlSizeConverter}}" />
											<ContentPresenter
												x:Name="Chrome"
												TextBlock.FontWeight="{TemplateBinding Control.FontWeight}"
												Grid.Column="1"
												HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
												Margin="{TemplateBinding Control.Padding}"
												RecognizesAccessKey="True"
												SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
												VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" />
										</Grid>
									</Grid>
								</Border>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger
									Property="UIElement.IsMouseOver"
									Value="True">
									<Setter
										TargetName="buttonHoverBorder"
										Property="Visibility"
										Value="Visible" />
									<Setter
										TargetName="buttonBorder"
										Property="Visibility"
										Value="Visible" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
			<Style
				x:Key="{x:Type Path}"
				TargetType="{x:Type Path}">
				<Setter
					Property="Fill"
					Value="{Binding Path=ColorModel.[SettingsWindowForegroundDimColor], Source='{x:Static common:BlueStacksUIBinding.Instance}', FallbackValue=#FFA5A7C2}" />
				<Setter
					Property="StrokeThickness"
					Value="0" />
			</Style>
			<Style
				x:Key="StepperStyle"
				TargetType="{x:Type common:XTextBox}">
				<Setter
					Property="UIElement.SnapsToDevicePixels"
					Value="True" />
				<Setter
					Property="FrameworkElement.OverridesDefaultStyle"
					Value="True" />
				<Setter
					Property="FrameworkElement.FocusVisualStyle"
					Value="{x:Null}" />
				<Setter
					Property="UIElement.AllowDrop"
					Value="True" />
				<Setter
					Property="BorderThickness"
					Value="1" />
				<Setter
					Property="Padding"
					Value="2" />
				<Setter
					Property="FontSize"
					Value="14" />
				<Setter
					Property="VerticalContentAlignment"
					Value="Center" />
				<Setter
					Property="HorizontalContentAlignment"
					Value="Center" />
				<Setter
					Property="Foreground"
					Value="{Binding Path=ColorModel.[TextBoxForegroundColor], Source='{x:Static common:BlueStacksUIBinding.Instance}'}" />
				<Setter
					Property="Background"
					Value="{Binding Path=ColorModel.[TextBoxBackgroundColor], Source='{x:Static common:BlueStacksUIBinding.Instance}'}" />
				<Setter
					Property="BorderBrush"
					Value="{Binding Path=ColorModel.[TextBoxBorderColor], Source='{x:Static common:BlueStacksUIBinding.Instance}'}" />
				<Setter
					Property="Template">
					<Setter.Value>
						<ControlTemplate
							TargetType="{x:Type common:XTextBox}">
							<Border
								x:Name="Border"
								BorderThickness="{TemplateBinding Control.BorderThickness}"
								BorderBrush="{TemplateBinding Control.BorderBrush}"
								Background="{TemplateBinding Control.Background}">
								<DockPanel
									LastChildFill="True">
									<Grid
										DockPanel.Dock="Right"
										Width="20">
										<Grid.RowDefinitions>
											<RowDefinition
												Height="*" />
											<RowDefinition
												Height="*" />
										</Grid.RowDefinitions>
										<RepeatButton
											Grid.Row="0"
											BorderBrush="{TemplateBinding Control.BorderBrush}"
											Click="OnIncrease">
											<Path
												Data="M0,8 L6,2 L12,8"
												Fill="{TemplateBinding Control.BorderBrush}"
												MouseEnter="Path_MouseEnter"
												MouseLeave="Path_MouseLeave" />
										</RepeatButton>
										<RepeatButton
											Grid.Row="1"
											BorderBrush="{TemplateBinding Control.BorderBrush}"
											Click="OnDecrease">
											<Path
												Data="M0,2 L6,8 L12,2"
												Fill="{TemplateBinding Control.BorderBrush}"
												MouseEnter="Path_MouseEnter"
												MouseLeave="Path_MouseLeave" />
										</RepeatButton>
									</Grid>
									<ScrollViewer
										x:Name="PART_ContentHost"
										Focusable="False"
										HorizontalScrollBarVisibility="Hidden"
										VerticalScrollBarVisibility="Hidden" />
								</DockPanel>
							</Border>
							<ControlTemplate.Triggers>
								<Trigger
									Property="UIElement.IsMouseOver"
									Value="True">
									<Setter
										TargetName="Border"
										Property="Border.BorderBrush"
										Value="{Binding Path=ColorModel.[TextBoxHoverBorderColor], Source='{x:Static common:BlueStacksUIBinding.Instance}'}" />
								</Trigger>
								<Trigger
									Property="UIElement.IsKeyboardFocused"
									Value="True">
									<Setter
										TargetName="Border"
										Property="Border.BorderBrush"
										Value="{Binding Path=ColorModel.[TextBoxFocussedBorderColor], Source='{x:Static common:BlueStacksUIBinding.Instance}'}" />
									<Setter
										TargetName="Border"
										Property="Border.Background"
										Value="{Binding Path=ColorModel.[TextBoxFocussedBackgroundColor], Source='{x:Static common:BlueStacksUIBinding.Instance}'}" />
									<Setter
										Property="Background"
										Value="{Binding Path=ColorModel.[TextBoxFocussedBackgroundColor], Source='{x:Static common:BlueStacksUIBinding.Instance}'}" />
									<Setter
										Property="Foreground"
										Value="{Binding Path=ColorModel.[TextBoxFocussedForegroundColor], Source='{x:Static common:BlueStacksUIBinding.Instance}'}" />
								</Trigger>
								<Trigger
									Property="IsEnabled"
									Value="False">
									<Setter
										TargetName="Border"
										Property="UIElement.Opacity"
										Value="0.6" />
									<Setter
										Property="UIElement.Opacity"
										Value="0.6" />
								</Trigger>
								<Trigger
									Property="common:XTextBox.InputTextValidity"
									Value="Error">
									<Setter
										TargetName="Border"
										Property="Border.BorderBrush"
										Value="{Binding Path=ColorModel.[TextBoxErrorBorderColor], Source='{x:Static common:BlueStacksUIBinding.Instance}'}" />
									<Setter
										TargetName="Border"
										Property="Border.Background"
										Value="{Binding Path=ColorModel.[TextBoxErrorBackgroundColor], Source='{x:Static common:BlueStacksUIBinding.Instance}'}" />
									<Setter
										Property="Background"
										Value="{Binding Path=ColorModel.[TextBoxErrorBackgroundColor], Source='{x:Static common:BlueStacksUIBinding.Instance}'}" />
								</Trigger>
								<Trigger
									Property="common:XTextBox.InputTextValidity"
									Value="Warning">
									<Setter
										TargetName="Border"
										Property="Border.BorderBrush"
										Value="{Binding Path=ColorModel.[TextBoxWarningBorderColor], Source='{x:Static common:BlueStacksUIBinding.Instance}'}" />
									<Setter
										TargetName="Border"
										Property="Border.Background"
										Value="{Binding Path=ColorModel.[TextBoxWarningBackgroundColor], Source='{x:Static common:BlueStacksUIBinding.Instance}'}" />
									<Setter
										Property="Background"
										Value="{Binding Path=ColorModel.[TextBoxWarningBackgroundColor], Source='{x:Static common:BlueStacksUIBinding.Instance}'}" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
				<Style.Triggers>
					<Trigger
						Property="TextBoxBase.IsReadOnly"
						Value="True">
						<Setter
							Property="Template">
							<Setter.Value>
								<ControlTemplate
									TargetType="{x:Type TextBox}">
									<TextBlock
										x:Name="mTextBlock"
										Text="{TemplateBinding TextBox.Text}"
										TextTrimming="CharacterEllipsis"
										VerticalAlignment="Center"
										Width="{TemplateBinding FrameworkElement.Width}"
										Foreground="{Binding Path=ColorModel.[TextBoxFocussedForegroundColor]}"
										ToolTip="{Binding Path=Text, RelativeSource={RelativeSource self}}" />
								</ControlTemplate>
							</Setter.Value>
						</Setter>
					</Trigger>
				</Style.Triggers>
			</Style>
		</ResourceDictionary>
	</FrameworkElement.Resources>
</common:XTextBox>
